{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-d043a653ffa73ff62593fb5b5f7eae54574763d22d849b66028afd0e88bda052d8c158bc3dc57f5ff4674b198d3f9b9eea456e7572c7590c1f9ae8fb924e5125",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth'\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AuthService {\n\n  constructor(private fireAuth: AngularFireAuth, private router: Router) {}\n\n  login(email: string, password: string) {\n    let error: any;\n\n    this.fireAuth.signInWithEmailAndPassword(email, password).then(() => {\n      localStorage.setItem('token', 'true');\n      this.router.navigate(['/home'])\n    }, err => {\n      alert(err.message);\n      error = true;\n      this.router.navigate(['/login'])\n    });\n\n    if(error)\n      return error;\n  }\n\n  register(email: string, password: string) {\n    this.fireAuth.createUserWithEmailAndPassword(email, password).then(() => {\n      alert('Registration successful');\n      this.router.navigate(['/home']);\n    }, err => {\n      alert(err.message);\n      this.router.navigate(['/register']);\n    });\n  }\n\n  logout() {\n    this.fireAuth.signOut().then(() => {\n      localStorage.removeItem('token');\n      this.router.navigate(['/login'])\n    }, err => {\n      alert(err.message);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WeatherService",
            "id": "injectable-WeatherService-99f1404d307fe14835e9f7bc0de1639b9d8a7a53d49c304c5ea279cf51ef9a9a22cdd4a135e5ba2ba34cf9979ae85524bb31ec3fa3981ff5a79d608df9491b7a",
            "file": "src/app/shared/services/weather.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getWeatherData",
                    "args": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class WeatherService {\n\n  constructor(private httpClient: HttpClient) {}\n\n  getWeatherData(lat: number, lon: number) {\n    let params = new HttpParams()\n    .set('lat', lat)\n    .set('lon', lon)\n    .set('units', 'metric')\n    .set('appid', environment.APPID)\n\n    return this.httpClient.get(environment.apiUrl, { params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-3582513c391eebfb6280b048ec3d6250f17c27f545edca2c90d7be5aa2ee9b23ebc344f6835f90ad2240a3ecdb16d8e67218ba8d20c59cfc3da08f48648941e6",
            "file": "src/app/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private fireAuth: AngularFireAuth, private router: Router) {}\n\n  canActivate() {\n    this.fireAuth.authState.subscribe(response => {\n      if((localStorage.getItem('token') == null) && (response?.uid == null)){\n        this.router.navigate(['/login'])\n      }\n    });\n   return true;\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1cc79b68ef8943e818b99f2e21dfb9b04f1e300dd48871d86bd01ccd4bc454a7ffec3957c02b1b39fba73c8509414e90f312a87ed9d694fa32560c0ce2210312",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'keepalive'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'keepalive';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-ce5c42841a9f11538349463fb197cecb776881199b5644b06cd5de23e5fbe1a680be2ee822ccb0cfbc0883aa58d5b2f60593a5f0f66e13be6390660cf6b18887",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 631,
                            "end": 644,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 632,
                                "end": 640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 30,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n\nbutton {\n  width: 380px;\n  height: 67px;\n  text-align: center;\n  color: #FFF;\n  background: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\n  box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.15);\n  border: none;\n  border-radius: 50px;\n  margin-top: 105px;\n  margin-bottom: 25px;\n  font-weight: bold;\n  font-family: Mark-Pro;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 46
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-9f8f47080df8f7e2f982d267849139e08cba82f6a0578e99febcfd607c769635fa080a9aaf4e3c88024b49de936271cd04da86124b6a908e884a674a101399e4",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actualDateTime",
                    "defaultValue": "Date.now()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "countdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lat",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lon",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "time",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "weatherData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getUserLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { WeatherService } from 'src/app/shared/services/weather.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  lat: number = 0;\n  lon: number = 0;\n  weatherData: any;\n  actualDateTime: number = Date.now();\n  time: number = 10;\n  countdown: any;\n\n  constructor(\n    private authService: AuthService,\n    private weatherService: WeatherService,\n    private router: Router,\n  ) { }\n\n  ngOnDestroy(): void {\n    clearInterval(this.countdown);\n  }\n\n  ngOnInit(): void {\n    this.getUserLocation();\n    this.countdown = this.refresh(this.time);\n  }\n\n  refresh(time: number) {\n    this.countdown = setInterval(() => {\n      if(time <= 0) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      } else {\n        time--;\n        this.time--;\n      }\n    }, 1000)\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  getUserLocation() {\n    this.weatherService.getWeatherData( -23.5489, -46.6388).\n    subscribe((weather) => {\n     this.weatherData = weather;\n    });\n    this.getUserPosition();\n  }\n\n  getUserPosition() {\n    if(\"geolocation\" in navigator) {\n      navigator.geolocation.watchPosition((success) => {\n        this.lat = success.coords.latitude;\n        this.lon = success.coords.longitude;\n\n        this.weatherService.getWeatherData(this.lat, this.lon).subscribe(data => {\n          this.weatherData = data;\n        })\n      })\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n\n.wrapper {\n    // position: absolute;\n    // width: 100%;\n    // bottom: 0;\n    // height: 68%;\n\n    max-height: 100vh;\n}\n.header {\n    margin-top: 25px;\n    margin-left: 40px;\n    margin-right: 40px;\n    display: flex;\n    justify-content: space-between;\n    @include responsive(mobileL) {\n        margin-left: 10px;\n        margin-right: 10px;\n        justify-content: space-around;\n    }\n    @include responsive(mobileS) {\n        margin-left: 10px;\n        margin-right: 10px;\n        justify-content: space-around;\n    }\n    .time {\n        display: flex;\n        flex-direction: column;\n        @include responsive(mobileS) {\n            display: none;\n        }\n        @include responsive(mobileL) {\n            display: none;\n        }\n        span {\n            font-weight: 700;\n            font-size: 144px;\n            color: $dark-text-color;\n            line-height: 100px;\n            margin-top: 35px;\n            @include responsive(tablet) {\n                font-size: 50px;\n                margin-top: 10px;\n                line-height: 30px;\n                text-align: center;\n            }\n            @include responsive(mobileL) {\n                font-size: 30px;\n                margin-top: 5px;\n                line-height: 30px;\n                text-align: center;\n            }\n            @include responsive(mobileS) {\n                font-size: 30px;\n                margin-top: 5px;\n                line-height: 30px;\n                text-align: center;\n            }\n        }\n        p {\n            color: $dark-text-color;\n            text-align: center;\n            @include responsive(mobileS) {\n                display: none;\n            }\n            @include responsive(mobileL) {\n                display: none;\n            }\n        }\n    }\n    .weatherWidget {\n        display: flex;\n        flex-direction: column;   \n        .location {\n            p {\n                margin: 0;\n                line-height: 30px;\n                font-size: 20px;\n                @include responsive(mobileL) {\n                    font-size: 15px;\n                    line-height: 5px;\n                }\n                @include responsive(mobileS) {\n                    font-size: 15px;\n                    line-height: 5px;\n                }\n            }\n        }\n        .weather {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            @include responsive(tablet) {\n                gap: 5px;\n            }\n            @include responsive(mobileL) {\n                gap: 5px;\n            }\n            img {\n                width: 32px;\n                margin-bottom: 15px;\n                @include responsive(mobileL) {\n                    width: 25px;\n                    margin-top: 15px;\n                }\n                @include responsive(mobileS) {\n                    width: 25px;\n                    margin-top: 15px;\n                }\n            }\n            p {\n                font-weight: 700;\n                font-size: 48px;\n                @include responsive(tablet) {\n                    font-size: 35px;\n                }\n                @include responsive(mobileL) {\n                    font-size: 30px;\n                }\n                @include responsive(mobileS) {\n                    font-size: 27px;\n                }\n            }\n        }\n    }\n}\n.main {\n    display: flex;\n    justify-content: space-between;\n    text-align: right;\n    margin-right: 135px;\n    align-items: center;\n    gap: 10px;\n    @include responsive(tablet) {\n        margin-right: 50px;\n        max-height: 100%;\n    }\n    @include responsive(mobileL) {\n        width: 100%;\n        margin-top: 3rem;\n        margin-bottom: 4rem;\n        justify-content: center;\n    }\n    @include responsive(mobileS) {\n        width: 100%;\n        margin-top: 3rem;\n        margin-bottom: 4rem;\n        justify-content: center;\n        align-items: center;\n        padding-right: 1rem;\n    }\n    #logo-xl {\n        @include responsive(tablet) {\n            width: 350px;\n        }\n        @include responsive(mobileL) {\n            display: none;\n        }\n        @include responsive(mobileS) {\n            display: none;\n        }\n    }\n    .span {\n        font-size: 24px;\n        line-height: 10px;\n        @include responsive(tablet) {\n            font-size: 16px;\n        }\n        @include responsive(mobileL) {\n            font-size: 16px;\n        }   \n        @include responsive(mobileS) {\n            font-size: 14px;\n        }     \n    }\n    .text-1 {\n        p {\n            font-weight: 700;\n            font-size: 36px;\n            color: $red-text-color;\n            @include responsive(tablet) {\n                font-size: 20px;\n            }\n            @include responsive(mobileL) {\n                font-size: 20px;\n            }\n            @include responsive(mobileS) {\n                font-size: 16px;\n            }\n        }\n    }\n    .phrase-large {\n        font-weight: 700;\n        font-size: 64px;\n        color: $red-text-color;\n        @include responsive(tablet) {\n            font-size: 20px;\n        }\n        @include responsive(mobileL) {\n            font-size: 20px;\n        }\n        @include responsive(mobileS) {\n            font-size: 16px;\n        }\n    }\n}\n.footer {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 100px;\n    background: linear-gradient(90.16deg, #33383D 0%, #1C1D20 100%);\n    @include responsive(tablet) {\n        justify-content: space-around;\n    }\n    @include responsive(mobileL) {\n        flex-direction: column;\n        justify-content: space-around;\n        height: 350px;\n    }\n    @include responsive(mobileS) {\n        flex-direction: column;\n        justify-content: space-around;\n        height: 350px;\n    }\n    .footer-info {\n        margin-left: 360px;\n        @include responsive(tablet) {\n            margin: 0;\n        }\n        @include responsive(mobileL) {\n            margin: 0;\n        }\n        @include responsive(mobileS) {\n            margin: 0;\n        }\n        .footer-text {\n            display: flex;\n            gap: 35px;\n            font-size: 12px;\n            color: $white;\n            text-align: right;\n            align-items: center;\n            max-width: 514px;\n            @include responsive(tablet) {\n                font-size: 10px;\n                gap: 17px;\n                justify-content: space-around;\n            }\n            @include responsive(mobileL) {\n                margin-right: 10px;\n                margin-left: 10px;\n                text-align: center;\n            }\n            @include responsive(mobileS) {\n                margin-right: 10px;\n                margin-left: 10px;\n                text-align: center;\n            }\n            img {\n                @include responsive(mobileL) {\n                    display: none;\n                }\n                @include responsive(mobileS) {\n                    display: none;\n                }\n            }\n        }\n    }\n    .refresh-timeout {\n        display: flex;\n        gap: 33px;\n        color: $white;\n        text-align: right;\n        align-items: center;\n        @include responsive(tablet) {\n            font-size: 14px;\n            margin-right: 20px;\n            margin-left: 20px;\n        }\n        @include responsive(mobileS) {\n            font-size: 12px;\n        }\n        .refresh-time {\n            margin-top: 20px;\n            display: flex;\n            flex-direction: column;\n            text-align: center;\n            @include responsive(mobileS) {\n                font-size: 14px;\n            }\n            span {\n                font-weight: 700;\n                font-size: 48px;\n                line-height: 30px;\n                @include responsive(tablet) {\n                    font-size: 30px;\n                }\n                @include responsive(mobileL) {\n                    font-size: 38px;\n                }\n                @include responsive(mobileS) {\n                    font-size: 30px;\n                }\n            }\n        }\n    }\n    .footer-buttons {\n        display: flex;\n        align-items: center;\n        @include responsive(mobileL) {\n            width: 100%;\n            flex-direction: column;\n        }\n        @include responsive(mobileS) {\n            width: 100%;\n            \n            flex-direction: column;\n        }\n        .continue {\n            cursor: pointer;\n            background-color: $white;\n            width: 131px;\n            padding: 36px 18px;\n            @include responsive(tablet) {\n                width: 110px;\n            }\n            @include responsive(mobileL) {\n                width: 100%;\n            }\n            @include responsive(mobileS) {\n                width: 100%;\n            }\n            p {\n                text-align: center;\n                color: $red-text-color;\n                font-size: 12px;\n                line-height: 15px;\n            }\n        }\n        .logout {\n            cursor: pointer;\n            width: 131px;\n            padding: 36px 18px;\n            @include responsive(tablet) {\n                width: 110px;\n            }\n            @include responsive(mobileL) {\n                width: 100%;\n            }\n            @include responsive(mobileS) {\n                width: 100%;\n            }\n            p {\n                color: $white;\n                font-weight: 700;\n                font-size: 12px;\n                text-align: center;\n            }\n        }\n    }\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header mark-font\">\n    <div class=\"logo\">\n        <img src=\"../../../assets/compass03.png\" alt=\"Logo Compass\">\n    </div>\n    <div class=\"time\">\n        <span>{{ actualDateTime | date:'shortTime':'':'pt' }}</span>\n        <p>{{ actualDateTime | date:'fullDate':'':'pt' }}</p>\n    </div>\n    <div class=\"weatherWidget\">\n        <div class=\"location\">\n            <p>{{ weatherData.name }} - {{ weatherData.sys.country }}</p>\n        </div>\n        <div class=\"weather\">\n            <span><img src=\"../../../assets/icons/{{ weatherData.weather[0].icon }}.png\" alt=\"\"></span>\n            <p>{{ weatherData.main.temp | number: '1.0-0' }}°</p>\n        </div>\n    </div>\n</div>\n<div class=\"wrapper\">\n    <div class=\"main\">\n        <div>\n            <img id=\"logo-xl\" src=\"../../../assets/logo-xl-cropped.png\" alt=\"Logo UOL\">\n        </div>\n        <div class=\"main-text mark-font\">\n            <div class=\"text-1\">\n                <p>Our mission is</p>\n                <span class=\"span\">Nossa missão é</span>\n            </div>\n            <div class=\"text-2\">\n                <p class=\"phrase-large\">to transform the world</p>\n                <span class=\"span\">transformar o mundo</span>\n            </div>\n            <div class=\"text-3\">\n                <p class=\"phrase-large\">building digital experiences</p>\n                <span class=\"span\">construindo experiências digitais</span>\n            </div>\n            <div class=\"text-4\">\n                <p class=\"phrase-large\">that enable our client's growth</p>\n                <span class=\"span\">que permitam o crescimento dos nossos clientes</span>\n            </div>\n        </div>\n    </div>\n    <div class=\"footer mark-font\">\n        <div class=\"footer-info\">\n            <div class=\"footer-text\">\n                <p>\n                    Essa janela do navegador é usada para manter sua sessão de autenticação ativa.\n                    Deixe-a aberta em segundo plano e abra uma nova janela para continuar a navegar.\n                </p>\n                <img src=\"../../../assets/line.png\" alt=\"\">\n            </div>\n        </div>\n        <div class=\"refresh-timeout\">\n            <p>Apllication <br> refresh in</p>\n            <p class=\"refresh-time\"><span>{{ time }}</span> seconds</p>\n        </div>\n        <div class=\"footer-buttons\">\n            <div class=\"continue\">\n                <p>Continuar navegando</p>\n            </div>\n            <div class=\"logout\">\n                <p (click)=\"logout()\">Logout</p>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-fbfa8face6632952bde633568604e9542659b39d6c3fee126720d5b173f030ca7921b74a21e0918a32e69dda8d930e309d47104b62ff7eff83a2d7f7ddaf8585",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isEmailError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isMoved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isPasswordError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "errorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  animations: [\n    trigger('warning', [\n      state('normal', style({\n        borderColor: '#FFF'\n      })),\n      state('yellow', style({\n        borderColor: '#E9B425'\n      })),\n      transition('normal <=> yellow', [\n        animate('0.5s')\n      ])\n    ])\n  ]\n})\nexport class LoginComponent {\n\n  email: string = '';\n  password: string = '';\n  isMoved: boolean = false;\n  isEmailError: boolean = false;\n  isPasswordError: boolean = false;\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  })\n  isLoggedIn = true;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  errorHandler() {\n    if(this.loginForm.controls['email'].errors) {\n      this.isEmailError = true;\n    } else {\n      this.isEmailError = false;\n    }\n\n    if(this.loginForm.controls['password'].errors) {\n      this.isPasswordError = true;\n    } else {\n      this.isPasswordError = false;\n    }\n  }\n\n  login() {\n    if(this.loginForm.controls.email.errors) {\n      this.isEmailError = true;\n    } else {\n      this.isEmailError = false;\n    }\n\n    if(this.loginForm.controls.password.errors) {\n      this.isPasswordError = true;\n    } else {\n      this.isPasswordError = false;\n    }\n\n    this.isLoggedIn = this.authService.login(this.email, this.password);\n\n    this.email = '';\n    this.password = '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n\n\n.containerr {\n    background: linear-gradient(180deg, #33383D 0%, #1C1D20 100%);\n    box-shadow: 4px 4px 70px rgba(0, 0, 0, 0.25);\n    height: auto;\n    display: flex;\n    max-width: 100%;\n    @include responsive(mobileS) {\n        min-height: 100vh;\n    }\n    @include responsive(mobileL) {\n        min-height: 100vh;\n    }\n    @include responsive(tablet) {\n        min-height: 100vh;\n    }\n    .login-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        width: 50%;\n        @include responsive(mobileS) {\n            width: 100%;\n        }\n        @include responsive(mobileL) {\n            width: 100%;\n        }\n        @include responsive(tablet) {\n            width: 100%;\n        }\n        .login-info {\n            @include responsive(mobileS) {\n                margin: 15px auto 0 auto;\n            }\n            @include responsive(mobileL) {\n                margin: 55px auto 0 65px;\n            }\n            @include responsive(tablet) {\n                position: relative;\n                top: 140px;\n                left: 20px;\n            }\n            margin-right: 6.5rem;\n            h1 {\n                font-size: 60px;\n                color: $text-color;\n                margin-top: 3rem;\n                @include responsive(mobileS) {\n                    font-size: 40px;\n                    margin-top: 5rem;\n                }\n                @include responsive(tablet) {\n                    margin: 0;\n                }\n            }\n            p {\n                font-size: 16px;\n                color: $text-color;\n                margin-top: 27px;\n                @include responsive(mobileS) {\n                    font-size: 14px;\n                }\n            }\n        }\n        .login-form {\n            @include responsive(mobileS) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            @include responsive(mobileL) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            @include responsive(tablet) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            .input {\n                display: flex;\n                position: relative;\n                @include responsive(mobileS) {\n                    width: 260px;\n                }\n                input {\n                    display: flex;\n                    flex-direction: column;\n                    width: 380px;\n                    height: 60px;\n                    border-radius: 50px;\n                    background-color: #26292C;\n                    border: 1px solid $white;\n                    padding: 20px;\n                    color: $text-color;\n                    &::placeholder {\n                        color: $text-color;\n                    }\n                    &:active {\n                        outline: none;\n                    }\n                    @include responsive(mobileS) {\n                        width: 290px;\n                    }\n                    @include responsive(mobileL) {\n                        width: 320px;\n                    }\n                }\n                img {\n                    position: absolute;\n                    right: -40px;\n                    top: 30%;\n                    @include responsive(mobileS) {\n                        right: 10px;\n                        width: 20px;\n                    }\n                    @include responsive(mobileL) {\n                        right: 20px;\n                        width: 20px;\n                    }\n                }\n            }\n            h2 {\n                @include responsive(mobileS) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 80px;\n                }\n                @include responsive(mobileL) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 107px;\n                }\n                @include responsive(tablet) {\n                    margin-top: 180px;\n                    position: relative;\n                    right: 130px;\n                }\n                margin-top: 97px;\n                font-weight: 400;\n                font-size: 30px;\n                color: $text-color;\n                margin-bottom: 32px;\n            }\n            button {\n                width: 380px;\n                height: 67px;\n                text-align: center;\n                color: $white;\n                background: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\n                box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.15);\n                border: none;\n                border-radius: 50px;\n                margin-top: 105px;\n                margin-bottom: 25px;\n                font-weight: bold;\n                @include responsive(mobileS) {\n                    width: 260px;\n                    height: 60px;\n                    margin-bottom: 20px;\n                    margin-top: 50px;\n                }\n                @include responsive(mobileL) {\n                    width: 320px;\n                    height: 65px;\n                    margin-bottom: 20px;\n                }\n                @include responsive(tablet) {\n                    margin-bottom: 10rem;\n                    margin-top: 50px;\n                    height: 65px;\n                }\n            }\n            .link-wrapper {\n                display: flex;\n                justify-content: center;\n                 span {\n                    color: $white;\n                 }\n                #link {\n                    margin-bottom: 30px;\n                    text-decoration: none;\n                    color: $text-color;\n                    color: $error-color;\n                    text-decoration: dashed;\n                }\n            }\n        }\n    }\n    .logo-container {\n        position: relative;\n        @include responsive(mobileS) {\n            position: absolute;\n        }\n        @include responsive(mobileL) {\n            position: absolute;\n        }\n        @include responsive(tablet) {\n            position: absolute;\n        }\n        width: 50%;\n        #bg {\n            width: 100%;\n            height: 100%;\n            object-fit: fill;\n            @include responsive(mobileS) {\n                display: none;\n            }\n            @include responsive(mobileL) {\n                display: none;\n            }\n            @include responsive(tablet) {\n                display: none;\n            }\n\n        }\n        #logo {\n            position: absolute;\n            left: 35%;\n            top: 2.5%;\n            @include responsive(mobileS) {\n                position: absolute;\n                width: 210px;\n                top: 20px;\n                left: 60px;\n                margin-bottom: 20px;\n            }\n            @include responsive(mobileL) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 75px;\n                margin-bottom: 20px;\n            }\n            @include responsive(tablet) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 245px;\n                margin-bottom: 20px;\n            }\n        }\n    }\n}\n\n.errorMessage {\n    display: flex;\n    font-weight: 700;\n    text-align: center;\n    font-size: 16px;\n    color: $error-color;\n    padding-left: 70px;\n    @include responsive(mobileS) {\n        padding-left: 15px;\n        align-items: center;\n    }\n    @include responsive(mobileL) {\n        align-items: center;\n        padding-right: 40px;\n    }\n    @include responsive(tablet) {\n        align-items: center;\n        padding-right: 50px;\n    }\n}\n\n.in-input {\n    position: absolute;\n    transform: translateX(-63px);\n    transition: .5s;\n    @include responsive(mobileS) {\n      transform: translateX(0);\n      right: 30px;\n    }\n}\n\n.out-input {\n    position: absolute;\n    transition: 0.5s;\n    right: -40px;\n    top: 15%;\n    @include responsive(mobileS) {\n     right: 30px;\n    }\n}\n\n.inputError {\n    border-color: $error-color !important;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"containerr\">\n    <div class=\"login-container\">\n        <div class=\"login-info mark-font\">\n            <h1>Olá,</h1>\n            <p>Para continuar navegando de forma <br> segura, efetue o login na rede.</p>\n        </div>\n        <div class=\"login-form mark-font\">\n            <h2>Login</h2>\n            <form\n                class=\"login-form\"\n                [formGroup]=\"loginForm\"\n                (change)=\"errorHandler()\"\n\n            >\n                <div class=\"input\" style=\"margin-bottom: 30px;\">\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        formControlName=\"email\"\n                        [@warning]=\"isEmailError ? 'yellow' : 'normal'\"\n                        [(ngModel)]=\"email\"\n                        placeholder=\"Usuário\"\n                    >\n                    <img\n                        [class.out-input]=\"email == ''\" [class.in-input] =\"email != '' && email != ' '\"\n                        src=\"../../../assets/icon-user.svg\"\n                        id=\"user-icon-default\"\n                    >\n                </div>\n                <div class=\"input\" style=\"margin-bottom: 30px;\">\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        formControlName=\"password\"\n                        [(ngModel)]=\"password\"\n                        [@warning]=\"isPasswordError ? 'yellow' : 'normal'\"\n                        placeholder=\"Senha\"\n                    >\n                    <img\n                        [class.out-input]=\"password == ''\" [class.in-input] =\"password != '' && password != ' '\"\n                        src=\"../../../assets/icon-password.svg\"\n                        id=\"password-icon-default\"\n                    >\n                </div>\n                <label *ngIf=\"isLoggedIn else errorMessage\"></label>\n                <button\n                    type=\"submit\"\n                    (click)=\"login()\"\n                    [disabled]=\"!loginForm.valid\">\n                    Continuar\n                </button>\n            </form>\n            <div class=\"link-wrapper\">\n                <span>Nao possui uma conta?</span>\n                <a id=\"link\" href=\"/register\">ㅤCadastre-se</a>\n            </div>\n        </div>\n    </div>\n    <div class=\"logo-container\">\n        <img src=\"../../../assets/compass02.png\" id=\"logo\" alt=\"Logo\">\n        <img src=\"../../../assets/compass01.png\" id=\"bg\" alt=\"Notebook\">\n    </div>\n</div>\n\n<ng-template #errorMessage>\n    <p class=\"errorMessage mark-font\">Ops, usuario ou senha invalidos. <br> Tente novamente!</p>\n</ng-template>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-6e8fa653cb47563c94c49762121dee39f047417fe67f7963c1926a9b1b4a3edcac031a53e151f26cb4a4de239a099d6755da2e589ff018e3fb39a5ed65e42212",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPassword",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isConfirmPasswordError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isEmailError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isPasswordError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "registerForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "validEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "validPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "errorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "haveLowercase",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "haveNumber",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "haveSymbols",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "haveUppercase",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n  animations: [\n    trigger('warning', [\n      state('normal', style({\n        borderColor: '#FFF'\n      })),\n      state('yellow', style({\n        borderColor: '#E9B425'\n      })),\n      transition('normal <=> yellow', [\n        animate('0.5s')\n      ])\n    ])\n  ]\n})\nexport class RegisterComponent implements OnInit {\n\n  email: string = '';\n  password: string = '';\n  confirmPassword: string = '';\n\n  isError: boolean = false;\n  isEmailError: boolean = false;\n  isPasswordError: boolean = false;\n  isConfirmPasswordError: boolean = false;\n\n  validEmail: any;\n  validPassword: any;\n\n  registerForm = new FormGroup({\n    email: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ])\n  })\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n  }\n\n  errorHandler() {\n    if(this.registerForm.controls['email'].errors) {\n      this.isEmailError = true;\n    } else {\n      this.isEmailError = false;\n    }\n\n    if(this.registerForm.controls['password'].errors) {\n      this.isPasswordError = true;\n    } else {\n      this.isPasswordError = false;\n    }\n\n    if(this.registerForm.controls['confirmPassword'].errors) {\n      this.isConfirmPasswordError = true;\n    } else {\n      this.isConfirmPasswordError = false;\n    }\n  }\n\n  validate() {\n    this.validEmail = this.registerForm.controls['email'].errors?.['pattern'] && this.registerForm.controls['email'].errors?.['required'];\n    this.validPassword = this.registerForm.controls['password'].errors?.['pattern'] && \n      this.registerForm.controls['password'].errors?.['required'] &&\n      this.registerForm.controls['confirmPassword'] == this.registerForm.controls['password']\n    \n    if(this.validEmail == true && this.validPassword == true) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  haveLowercase(param: string) {\n    let regEx = /[a-z]/;\n    return regEx.test(param);\n  }\n\n  haveUppercase(param: string) {\n    let regEx = /[A-Z]/;\n    return regEx.test(param);\n  }\n\n  haveNumber(param: string) {\n    let regEx = /[0-9]/;\n    return regEx.test(param);\n  }\n\n  haveSymbols(param: string) {\n    let regEx = /[$&+,:;=?@#|'<>.^*()%!-]/;\n    return regEx.test(param);\n  }\n\n  register() {\n    if(!this.registerForm.valid && !this.registerForm.dirty) {\n      this.isError = true;\n    } else {\n      this.authService.register(this.email, this.password);\n    \n      this.email = '';\n      this.password = '';\n    }\n  }\n\n  get Email() {\n    return this.registerForm.get('email')\n  }\n\n  get Password() {\n    return this.registerForm.get('password')\n  }\n\n  get ConfirmPassword() {\n    return this.registerForm.get('confirmPassword')\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n\n\n.containerr {\n    background: linear-gradient(180deg, #33383D 0%, #1C1D20 100%);\n    box-shadow: 4px 4px 70px rgba(0, 0, 0, 0.25);\n    height: auto;\n    display: flex;\n    max-width: 100%;\n    @include responsive(mobileS) {\n        min-height: 100vh;\n    }\n    @include responsive(mobileL) {\n        min-height: 100vh;\n    }\n    @include responsive(tablet) {\n        min-height: 100vh;\n    }\n    .login-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        width: 50%;\n        @include responsive(mobileS) {\n            width: 100%;\n        }\n        @include responsive(mobileL) {\n            width: 100%;\n        }\n        @include responsive(tablet) {\n            width: 100%;\n        }\n        .login-info {\n            @include responsive(mobileS) {\n                margin: 15px auto 0 auto;\n            }\n            @include responsive(mobileL) {\n                margin: 55px auto 0 auto;\n            }\n            @include responsive(tablet) {\n                position: relative;\n                top: 140px;\n                left: 20px;\n            }\n            margin-right: 6.5rem;\n            h1 {\n                font-size: 60px;\n                color: $text-color;\n                margin-top: 3rem;\n                @include responsive(mobileS) {\n                    font-size: 40px;\n                    margin-top: 5rem;\n                }\n                @include responsive(tablet) {\n                    margin: 0;\n                }\n            }\n            p {\n                font-size: 16px;\n                color: $text-color;\n                margin-top: 27px;\n                @include responsive(mobileS) {\n                    font-size: 14px;\n                }\n            }\n        }\n        .login-form {\n            @include responsive(mobileS) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            @include responsive(mobileL) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            @include responsive(tablet) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            .input {\n                display: flex;\n                position: relative;\n                @include responsive(mobileS) {\n                    width: 260px;\n                }\n                input {\n                    display: flex;\n                    flex-direction: column;\n                    width: 380px;\n                    height: 60px;\n                    border-radius: 50px;\n                    background-color: #26292C;\n                    border: 1px solid $white;\n                    padding: 20px;\n                    color: $text-color;\n                    &::placeholder {\n                        color: $text-color;\n                    }\n                    &:active {\n                        outline: none;\n                    }\n                    @include responsive(mobileS) {\n                        width: 290px;\n                    }\n                    @include responsive(mobileL) {\n                        width: 320px;\n                    }\n                }\n                img {\n                    position: absolute;\n                    right: -40px;\n                    top: 30%;\n                    @include responsive(mobileS) {\n                        right: 10px;\n                        width: 20px;\n                    }\n                    @include responsive(mobileL) {\n                        right: 20px;\n                        width: 20px;\n                    }\n                }\n            }\n            .errorContainer {\n                margin-left: 20px;\n                max-width: 220px;\n                text-align: justify;\n                margin-top: 10px;\n                .error {\n                    font-size: 16px;\n                    font-weight: 700;\n                    text-align: center;\n                    color: $error-color;\n                }\n            }\n            .passwordErrorContainer {\n                margin-left: 20px;\n                max-width: 320px;\n                margin-top: 10px;\n                @include responsive(mobileS) {\n                    max-width: 220px;\n                }\n                .error {\n                    font-size: 16px;\n                    font-weight: 700;\n                    color: $error-color;\n                }\n            }\n            h2 {\n                @include responsive(mobileS) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 58px;\n                }\n                @include responsive(mobileL) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 74px;\n                }\n                @include responsive(tablet) {\n                    margin-top: 180px;\n                    position: relative;\n                    right: 105px;\n                }\n                margin-top: 97px;\n                font-weight: 400;\n                font-size: 30px;\n                color: $text-color;\n                margin-bottom: 32px;\n            }\n            button {\n                width: 380px;\n                height: 67px;\n                text-align: center;\n                color: $white;\n                background: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\n                box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.15);\n                border: 2px solid #FF2D04;\n                border-radius: 50px;\n                margin-top: 115px;\n                margin-bottom: 25px;\n                font-weight: bold;\n                @include responsive(mobileS) {\n                    width: 260px;\n                    height: 60px;\n                    margin-bottom: 20px;\n                    margin-top: 50px;\n                }\n                @include responsive(mobileL) {\n                    width: 320px;\n                    height: 65px;\n                    margin-bottom: 20px;\n                }\n                @include responsive(tablet) {\n                    margin-bottom: 20px;\n                    margin-top: 50px;\n                    height: 65px;\n                }\n            }\n            #link {\n                display: flex;\n                justify-content: center;\n                margin-bottom: 30px;\n                text-decoration: none;\n                color: $text-color;\n            }\n        }\n    }\n    .logo-container {\n        position: relative;\n        @include responsive(mobileS) {\n            position: absolute;\n        }\n        @include responsive(mobileL) {\n            position: absolute;\n        }\n        @include responsive(tablet) {\n            position: absolute;\n        }\n        width: 50%;\n        #bg {\n            width: 100%;\n            height: 100%;\n            object-fit: fill;\n            @include responsive(mobileS) {\n                display: none;\n            }\n            @include responsive(mobileL) {\n                display: none;\n            }\n            @include responsive(tablet) {\n                display: none;\n            }\n            \n        }\n        #logo {\n            position: absolute;\n            left: 35%;\n            top: 2.5%;\n            @include responsive(mobileS) {\n                position: absolute;\n                width: 210px;\n                top: 20px;\n                left: 60px;\n                margin-bottom: 20px;\n            }\n            @include responsive(mobileL) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 75px;\n                margin-bottom: 20px;\n            }\n            @include responsive(tablet) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 245px;\n                margin-bottom: 20px;\n            }\n        }\n    }\n}\n\n.errorMessage {\n    display: flex;\n    font-weight: 700;\n    text-align: center;\n    font-size: 16px;\n    color: $error-color;\n    padding-left: 70px;\n    @include responsive(mobileS) {\n        padding-left: 15px;\n        align-items: center;\n    }\n    @include responsive(mobileL) {\n        align-items: center;\n        padding-right: 40px;\n    }\n    @include responsive(tablet) {\n        align-items: center;\n        padding-right: 50px;\n    }\n}\n\n.in-input {\n    position: absolute;\n    transform: translateX(-63px);\n    transition: .5s;\n    @include responsive(mobileS) {\n      transform: translateX(0px);\n    }\n    @include responsive(mobileL) {\n        transform: translateX(0px);\n    }\n}\n\n.out-input {\n    position: absolute;\n    transition: 0.5s;\n    right: -40px;\n    top: 15%;\n    @include responsive(mobileS) {\n        position: absolute;\n        right: 10px;\n    }\n}\n\n.checked {\n    color: green !important;\n}\n\n.inputError {\n    border-color: $error-color !important;\n}",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "Email": {
                    "name": "Email",
                    "getSignature": {
                        "name": "Email",
                        "type": "",
                        "returnType": "",
                        "line": 124
                    }
                },
                "Password": {
                    "name": "Password",
                    "getSignature": {
                        "name": "Password",
                        "type": "",
                        "returnType": "",
                        "line": 128
                    }
                },
                "ConfirmPassword": {
                    "name": "ConfirmPassword",
                    "getSignature": {
                        "name": "ConfirmPassword",
                        "type": "",
                        "returnType": "",
                        "line": 132
                    }
                }
            },
            "templateData": "<div class=\"containerr\">\n    <div class=\"login-container\">\n        <div class=\"login-info mark-font\">\n            <h1>Olá,</h1>\n            <p>Para continuar navegando de forma <br> segura, efetue o cadastro na rede.</p>\n        </div>\n        <div class=\"login-form mark-font\">\n            <h2>Registrar</h2>\n            <form\n                class=\"login-form\"\n                [formGroup]=\"registerForm\"\n                (change)=\"errorHandler()\"\n                (ngSubmit)=\"validate()\">\n                <div style=\"margin-bottom: 30px;\">\n                    <div class=\"input\">\n                        <input\n                            id=\"email\"\n                            type=\"email\" \n                            formControlName=\"email\"\n                            [@warning]=\"isEmailError ? 'yellow' : 'normal'\"\n                            [(ngModel)]=\"email\"\n                            placeholder=\"Usuário\"\n                        >\n                        <img \n                            [class.out-input]=\"email == ''\" [class.in-input] =\"email != '' && email != ' '\"\n                            src=\"../../../assets/icon-user.svg\" \n                            id=\"user-icon-default\"\n                        >\n                    </div>\n                    <div *ngIf=\"(Email?.invalid && Email?.touched) || Email?.dirty\" class=\"errorContainer\">\n                        <small \n                            *ngIf=\"registerForm.controls['email'].errors?.['required']\"\n                            class=\"error\" \n                        >\n                            Insira um email\n                        </small>\n                        <small \n                            *ngIf=\"registerForm.controls['email'].errors?.['pattern']\"\n                            class=\"error\"\n                        >\n                            Insira um email valido\n                        </small>\n                    </div>\n                </div>\n                <div style=\"margin-bottom: 30px;\">\n                    <div class=\"input\">\n                        <input\n                            id=\"password\" \n                            type=\"password\" \n                            formControlName=\"password\"\n                            [(ngModel)]=\"password\"\n                            [@warning]=\"isPasswordError ? 'yellow' : 'normal'\"\n                            placeholder=\"Senha\"\n                        >\n                        <img \n                            [class.out-input]=\"password == ''\" [class.in-input] =\"password != '' && password != ' '\"\n                            src=\"../../../assets/icon-password.svg\" \n                            id=\"password-icon-default\" \n                        >\n                    </div>\n                    <div *ngIf=\"(Password?.invalid && Password?.touched) || Password?.dirty\" class=\"passwordErrorContainer\">\n                        <small \n                            *ngIf=\"registerForm.controls['password'].errors?.['required']\" \n                            class=\"error\"\n                        >\n                            Insira uma senha\n                        </small>\n                        <small \n                            *ngIf=\"registerForm.controls['password'].errors?.['pattern']\"\n                            class=\"error\"\n                            id=\"passwordError\"\n                        >\n                            Sua senha deve conter: \n                            <ul>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"password.length >= 6\">\n                                    6 caracteres\n                                </li>\n                                <li \n                                    class=\"error\" \n                                    [class.checked]=\"haveUppercase(password)\">\n                                    Uma letra maiuscula\n                                </li>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"haveLowercase(password)\">\n                                    Uma letra minuscula\n                                </li>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"haveNumber(password)\">\n                                    Um numero\n                                </li>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"haveSymbols(password)\">\n                                    Um caracter especial\n                                </li>\n                            </ul>\n                        </small>\n                    </div>\n                </div>\n                <div style=\"margin-bottom: 30px;\">\n                    <div class=\"input\">\n                        <input\n                            id=\"confirmPassword\" \n                            type=\"password\" \n                            formControlName=\"confirmPassword\"\n                            [(ngModel)]=\"confirmPassword\"\n                            [@warning]=\"isConfirmPasswordError ? 'yellow' : 'normal'\"\n                            placeholder=\"Confirme sua senha\"\n                        >\n                        <img \n                            [class.out-input]=\"password == ''\" [class.in-input] =\"password != '' && password != ' '\"\n                            src=\"../../../assets/icon-password.svg\" \n                            id=\"password-icon-default\" \n                        >\n                    </div>\n                    <div *ngIf=\"(ConfirmPassword?.invalid && ConfirmPassword?.touched) || ConfirmPassword?.dirty\" class=\"errorContainer\">\n                        <small \n                            *ngIf=\"registerForm.controls['confirmPassword'].errors?.['required']\" \n                            class=\"error\"\n                        >\n                            Confirme sua senha <br>\n                        </small>\n                        <small \n                            *ngIf=\"!(registerForm.controls['confirmPassword'].value == registerForm.controls['password'].value)\"\n                            class=\"error\"\n                        >\n                            As senhas devem ser iguais\n                        </small>\n                    </div>\n                </div>\n                <button \n                    type=\"submit\" \n                    (click)=\"register()\"\n                    [disabled]=\"!registerForm.valid\">\n                    Continuar\n                </button>\n            </form>\n            <a id=\"link\" href=\"/login\">Ja possui uma conta? Faca login</a>\n        </div>\n    </div>\n    <div class=\"logo-container\">\n        <img src=\"../../../assets/compass02.png\" id=\"logo\" alt=\"Logo\">\n        <img src=\"../../../assets/compass01.png\" id=\"bg\" alt=\"Notebook\">\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-922ce403b1aac550185e8b2c285625c73b26ef2f78e622d1251d9d5c39546ddfbd05773cd5fb1797273d851c6245121ad72055e9c536c9fc8fc760a910bf3bb0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { AuthService } from 'src/app/shared/services/auth.service';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { environment } from 'src/environments/environment';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { WeatherService } from './shared/services/weather.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { registerLocaleData } from '@angular/common';\nimport localePt from '@angular/common/locales/pt';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nregisterLocaleData(localePt)\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    RegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [WeatherService, AuthService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "WeatherService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f04dde49874a5aa4766061a406c608e778280ae4a6ddbac1b134fe2fa9b84cbbb5fd6d4686c22559c8b617bcc70be50824f3dc9399613b17598dee75a2c9d795",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth/auth.guard';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "environmentExample.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"\",\n    authDomain: \"\",\n    projectId: \"\",\n    storageBucket: \"\",\n    messagingSenderId: \"\",\n    appId: \"\",\n    measurementId: \"\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'your api key here'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyDzKKnmpOVOVj7ZNqNXVm5JqoMZ44KkHkM\",\n    authDomain: \"compass-01.firebaseapp.com\",\n    projectId: \"compass-01\",\n    storageBucket: \"compass-01.appspot.com\",\n    messagingSenderId: \"114774932441\",\n    appId: \"1:114774932441:web:58c4201c74d76138a0f7c8\",\n    measurementId: \"G-8JEWB4P7SM\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'bfa29a247389ee6ae90007c90a10c40b'\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "environmentExample.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "environmentExample.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"\",\n    authDomain: \"\",\n    projectId: \"\",\n    storageBucket: \"\",\n    messagingSenderId: \"\",\n    appId: \"\",\n    measurementId: \"\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'your api key here'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyDzKKnmpOVOVj7ZNqNXVm5JqoMZ44KkHkM\",\n    authDomain: \"compass-01.firebaseapp.com\",\n    projectId: \"compass-01\",\n    storageBucket: \"compass-01.appspot.com\",\n    messagingSenderId: \"114774932441\",\n    appId: \"1:114774932441:web:58c4201c74d76138a0f7c8\",\n    measurementId: \"G-8JEWB4P7SM\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'bfa29a247389ee6ae90007c90a10c40b'\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "environmentExample.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/weather.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}