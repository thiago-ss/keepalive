{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-d043a653ffa73ff62593fb5b5f7eae54574763d22d849b66028afd0e88bda052d8c158bc3dc57f5ff4674b198d3f9b9eea456e7572c7590c1f9ae8fb924e5125",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth'\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AuthService {\n\n  constructor(private fireAuth: AngularFireAuth, private router: Router) {}\n\n  login(email: string, password: string) {\n    let error: any;\n\n    this.fireAuth.signInWithEmailAndPassword(email, password).then(() => {\n      localStorage.setItem('token', 'true');\n      this.router.navigate(['/home'])\n    }, err => {\n      alert(err.message);\n      error = true;\n      this.router.navigate(['/login'])\n    });\n\n    if(error)\n      return error;\n  }\n\n  register(email: string, password: string) {\n    this.fireAuth.createUserWithEmailAndPassword(email, password).then(() => {\n      alert('Registration successful');\n      this.router.navigate(['/home']);\n    }, err => {\n      alert(err.message);\n      this.router.navigate(['/register']);\n    });\n  }\n\n  logout() {\n    this.fireAuth.signOut().then(() => {\n      localStorage.removeItem('token');\n      this.router.navigate(['/login'])\n    }, err => {\n      alert(err.message);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WeatherService",
            "id": "injectable-WeatherService-de652cc25fb5ed42ae6a1d225541fa027a21a9d11c274223d14a9613ca9a3e7908c709e4d422e4c960517b4442bfbe18101af5f7ce8f1c819c945c6b49836b1c",
            "file": "src/app/shared/services/weather.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getWeatherData",
                    "args": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lon",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class WeatherService {\n\n  constructor(private httpClient: HttpClient) {}\n\n  getWeatherData(lat: number, lon: number): Observable<any> {\n    let params = new HttpParams()\n    .set('lat', lat)\n    .set('lon', lon)\n    .set('units', 'metric')\n    .set('appid', environment.APPID)\n\n    return this.httpClient.get(environment.apiUrl, { params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-3582513c391eebfb6280b048ec3d6250f17c27f545edca2c90d7be5aa2ee9b23ebc344f6835f90ad2240a3ecdb16d8e67218ba8d20c59cfc3da08f48648941e6",
            "file": "src/app/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private fireAuth: AngularFireAuth, private router: Router) {}\n\n  canActivate() {\n    this.fireAuth.authState.subscribe(response => {\n      if((localStorage.getItem('token') == null) && (response?.uid == null)){\n        this.router.navigate(['/login'])\n      }\n    });\n   return true;\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1cc79b68ef8943e818b99f2e21dfb9b04f1e300dd48871d86bd01ccd4bc454a7ffec3957c02b1b39fba73c8509414e90f312a87ed9d694fa32560c0ce2210312",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'keepalive'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'keepalive';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-cd70461c1756d8c0e4f7d410159107dec997a184a44395b95ec2624e186b1f30a725e95ec142fff64f8a51622b1b70931e101a75b14fba1909cf71c7342acaad",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button type=\"submit\">{{ value }}</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "defaultValue": "'Continuar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  template: `\n    <button type=\"submit\">{{ value }}</button>\n  `,\n  styleUrls: ['./button.css']\n})\nexport class ButtonComponent {\n\n  @Input()\n  value: any = 'Continuar'\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  width: 380px;\n  height: 67px;\n  text-align: center;\n  color: #FFF;\n  background: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\n  box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.15);\n  border: none;\n  border-radius: 50px;\n  margin-top: 105px;\n  margin-bottom: 25px;\n  font-weight: bold;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-c9034f650a5dfff1400164b7d4c2e6113d8f20b6c6c9ed4d034738a1723d69e5f66e1227ce30772f9e151ffa98e0b6a8ac71ac51a237823647a406bfe088197b",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actualDateTime",
                    "defaultValue": "Date.now()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "countdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lat",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lon",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "time",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "weatherData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getUserLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { WeatherService } from 'src/app/shared/services/weather.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  lat: number = 0;\n  lon: number = 0;\n  weatherData: any;\n  actualDateTime: number = Date.now();\n  time: number = 60;\n  countdown: any;\n\n  constructor(\n    private authService: AuthService,\n    private weatherService: WeatherService,\n    private router: Router,\n  ) { }\n\n  ngOnDestroy(): void {\n    clearInterval(this.countdown);\n  }\n\n  ngOnInit(): void {\n    this.getUserLocation();\n    this.countdown = this.refresh(this.time);\n  }\n\n  refresh(time: number) {\n    this.countdown = setInterval(() => {\n      if(time <= 0) {\n        this.authService.logout();\n      } else {\n        time--;\n        this.time--;\n      }\n    }, 1000)\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  getUserLocation() {\n    this.weatherService.getWeatherData( -23.5489, -46.6388).\n    subscribe((weather) => {\n     this.weatherData = weather;\n    });\n    this.getUserPosition();\n  }\n\n  getUserPosition() {\n    if(\"geolocation\" in navigator) {\n      navigator.geolocation.watchPosition((success) => {\n        this.lat = success.coords.latitude;\n        this.lon = success.coords.longitude;\n\n        this.weatherService.getWeatherData(this.lat, this.lon).subscribe(data => {\n          this.weatherData = data;\n        })\n      })\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n\n.wrapper {\n    // position: absolute;\n    // width: 100%;\n    // bottom: 0;\n    // height: 68%;\n\n    max-height: 100vh;\n}\n.header {\n    margin-top: 25px;\n    margin-left: 40px;\n    margin-right: 40px;\n    display: flex;\n    justify-content: space-between;\n    @include responsive(mobileL) {\n        margin-left: 10px;\n        margin-right: 10px;\n        justify-content: space-around;\n    }\n    @include responsive(mobileS) {\n        margin-left: 10px;\n        margin-right: 10px;\n        justify-content: space-around;\n    }\n    .time {\n        display: flex;\n        flex-direction: column;\n        @include responsive(mobileS) {\n            display: none;\n        }\n        @include responsive(mobileL) {\n            display: none;\n        }\n        span {\n            font-weight: 700;\n            font-size: 144px;\n            color: $dark-text-color;\n            line-height: 100px;\n            margin-top: 35px;\n            @include responsive(tablet) {\n                font-size: 50px;\n                margin-top: 10px;\n                line-height: 30px;\n                text-align: center;\n            }\n            @include responsive(mobileL) {\n                font-size: 30px;\n                margin-top: 5px;\n                line-height: 30px;\n                text-align: center;\n            }\n            @include responsive(mobileS) {\n                font-size: 30px;\n                margin-top: 5px;\n                line-height: 30px;\n                text-align: center;\n            }\n        }\n        p {\n            color: $dark-text-color;\n            text-align: center;\n            @include responsive(mobileS) {\n                display: none;\n            }\n            @include responsive(mobileL) {\n                display: none;\n            }\n        }\n    }\n    .weatherWidget {\n        display: flex;\n        flex-direction: column;   \n        .location {\n            p {\n                margin: 0;\n                line-height: 30px;\n                font-size: 20px;\n                @include responsive(mobileL) {\n                    font-size: 15px;\n                    line-height: 5px;\n                }\n                @include responsive(mobileS) {\n                    font-size: 15px;\n                    line-height: 5px;\n                }\n            }\n        }\n        .weather {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            @include responsive(tablet) {\n                gap: 5px;\n            }\n            @include responsive(mobileL) {\n                gap: 5px;\n            }\n            img {\n                width: 32px;\n                margin-bottom: 15px;\n                @include responsive(mobileL) {\n                    width: 25px;\n                    margin-top: 15px;\n                }\n                @include responsive(mobileS) {\n                    width: 25px;\n                    margin-top: 15px;\n                }\n            }\n            p {\n                font-weight: 700;\n                font-size: 48px;\n                @include responsive(tablet) {\n                    font-size: 35px;\n                }\n                @include responsive(mobileL) {\n                    font-size: 30px;\n                }\n                @include responsive(mobileS) {\n                    font-size: 27px;\n                }\n            }\n        }\n    }\n}\n.main {\n    display: flex;\n    justify-content: space-between;\n    text-align: right;\n    margin-right: 135px;\n    align-items: center;\n    gap: 10px;\n    @include responsive(tablet) {\n        margin-right: 50px;\n        max-height: 100%;\n    }\n    @include responsive(mobileL) {\n        width: 100%;\n        margin-top: 3rem;\n        margin-bottom: 4rem;\n        justify-content: center;\n    }\n    @include responsive(mobileS) {\n        width: 100%;\n        margin-top: 3rem;\n        margin-bottom: 4rem;\n        justify-content: center;\n        align-items: center;\n        padding-right: 1rem;\n    }\n    #logo-xl {\n        @include responsive(tablet) {\n            width: 350px;\n        }\n        @include responsive(mobileL) {\n            display: none;\n        }\n        @include responsive(mobileS) {\n            display: none;\n        }\n    }\n    .span {\n        font-size: 24px;\n        line-height: 10px;\n        @include responsive(tablet) {\n            font-size: 16px;\n        }\n        @include responsive(mobileL) {\n            font-size: 16px;\n        }   \n        @include responsive(mobileS) {\n            font-size: 14px;\n        }     \n    }\n    .text-1 {\n        p {\n            font-weight: 700;\n            font-size: 36px;\n            color: $red-text-color;\n            @include responsive(tablet) {\n                font-size: 20px;\n            }\n            @include responsive(mobileL) {\n                font-size: 20px;\n            }\n            @include responsive(mobileS) {\n                font-size: 16px;\n            }\n        }\n    }\n    .phrase-large {\n        font-weight: 700;\n        font-size: 64px;\n        color: $red-text-color;\n        @include responsive(tablet) {\n            font-size: 20px;\n        }\n        @include responsive(mobileL) {\n            font-size: 20px;\n        }\n        @include responsive(mobileS) {\n            font-size: 16px;\n        }\n    }\n}\n.footer {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 100px;\n    background: linear-gradient(90.16deg, #33383D 0%, #1C1D20 100%);\n    @include responsive(tablet) {\n        justify-content: space-around;\n    }\n    @include responsive(mobileL) {\n        flex-direction: column;\n        justify-content: space-around;\n        height: 350px;\n    }\n    @include responsive(mobileS) {\n        flex-direction: column;\n        justify-content: space-around;\n        height: 350px;\n    }\n    .footer-info {\n        margin-left: 360px;\n        @include responsive(tablet) {\n            margin: 0;\n        }\n        @include responsive(mobileL) {\n            margin: 0;\n        }\n        @include responsive(mobileS) {\n            margin: 0;\n        }\n        .footer-text {\n            display: flex;\n            gap: 35px;\n            font-size: 12px;\n            color: $white;\n            text-align: right;\n            align-items: center;\n            max-width: 514px;\n            @include responsive(tablet) {\n                font-size: 10px;\n                gap: 17px;\n                justify-content: space-around;\n            }\n            @include responsive(mobileL) {\n                margin-right: 10px;\n                margin-left: 10px;\n                text-align: center;\n            }\n            @include responsive(mobileS) {\n                margin-right: 10px;\n                margin-left: 10px;\n                text-align: center;\n            }\n            img {\n                @include responsive(mobileL) {\n                    display: none;\n                }\n                @include responsive(mobileS) {\n                    display: none;\n                }\n            }\n        }\n    }\n    .refresh-timeout {\n        display: flex;\n        gap: 33px;\n        color: $white;\n        text-align: right;\n        align-items: center;\n        @include responsive(tablet) {\n            font-size: 14px;\n            margin-right: 20px;\n            margin-left: 20px;\n        }\n        @include responsive(mobileS) {\n            font-size: 12px;\n        }\n        .refresh-time {\n            margin-top: 20px;\n            display: flex;\n            flex-direction: column;\n            text-align: center;\n            @include responsive(mobileS) {\n                font-size: 14px;\n            }\n            span {\n                font-weight: 700;\n                font-size: 48px;\n                line-height: 30px;\n                @include responsive(tablet) {\n                    font-size: 30px;\n                }\n                @include responsive(mobileL) {\n                    font-size: 38px;\n                }\n                @include responsive(mobileS) {\n                    font-size: 30px;\n                }\n            }\n        }\n    }\n    .footer-buttons {\n        display: flex;\n        align-items: center;\n        @include responsive(mobileL) {\n            width: 100%;\n            flex-direction: column;\n        }\n        @include responsive(mobileS) {\n            width: 100%;\n            \n            flex-direction: column;\n        }\n        .continue {\n            cursor: pointer;\n            background-color: $white;\n            width: 131px;\n            padding: 36px 18px;\n            @include responsive(tablet) {\n                width: 110px;\n            }\n            @include responsive(mobileL) {\n                width: 100%;\n            }\n            @include responsive(mobileS) {\n                width: 100%;\n            }\n            p {\n                text-align: center;\n                color: $red-text-color;\n                font-size: 12px;\n                line-height: 15px;\n            }\n        }\n        .logout {\n            cursor: pointer;\n            width: 131px;\n            padding: 36px 18px;\n            @include responsive(tablet) {\n                width: 110px;\n            }\n            @include responsive(mobileL) {\n                width: 100%;\n            }\n            @include responsive(mobileS) {\n                width: 100%;\n            }\n            p {\n                color: $white;\n                font-weight: 700;\n                font-size: 12px;\n                text-align: center;\n            }\n        }\n    }\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header mark-font\">\n    <div class=\"logo\">\n        <img src=\"../../../assets/compass03.png\" alt=\"Logo Compass\">\n    </div>\n    <div class=\"time\">\n        <span>{{ actualDateTime | date:'shortTime':'':'pt' }}</span>\n        <p>{{ actualDateTime | date:'fullDate':'':'pt' }}</p>\n    </div>\n    <div class=\"weatherWidget\">\n        <div class=\"location\">\n            <p>{{ weatherData.name }} - {{ weatherData.sys.country }}</p>\n        </div>\n        <div class=\"weather\">\n            <span><img src=\"../../../assets/icons/{{ weatherData.weather[0].icon }}.png\" alt=\"\"></span>\n            <p>{{ weatherData.main.temp | number: '1.0-0' }}°</p>\n        </div>\n    </div>\n</div>\n<div class=\"wrapper\">\n    <div class=\"main\">\n        <div>\n            <img id=\"logo-xl\" src=\"../../../assets/logo-xl-cropped.png\" alt=\"Logo UOL\">\n        </div>\n        <div class=\"main-text mark-font\">\n            <div class=\"text-1\">\n                <p>Our mission is</p>\n                <span class=\"span\">Nossa missão é</span>\n            </div>\n            <div class=\"text-2\">\n                <p class=\"phrase-large\">to transform the world</p>\n                <span class=\"span\">transformar o mundo</span>\n            </div>\n            <div class=\"text-3\">\n                <p class=\"phrase-large\">building digital experiences</p>\n                <span class=\"span\">construindo experiências digitais</span>\n            </div>\n            <div class=\"text-4\">\n                <p class=\"phrase-large\">that enable our client's growth</p>\n                <span class=\"span\">que permitam o crescimento dos nossos clientes</span>\n            </div>\n        </div>\n    </div>\n    <div class=\"footer mark-font\">\n        <div class=\"footer-info\">\n            <div class=\"footer-text\">\n                <p>\n                    Essa janela do navegador é usada para manter sua sessão de autenticação ativa.\n                    Deixe-a aberta em segundo plano e abra uma nova janela para continuar a navegar.\n                </p>\n                <img src=\"../../../assets/line.png\" alt=\"\">\n            </div>\n        </div>\n        <div class=\"refresh-timeout\">\n            <p>Apllication <br> refresh in</p>\n            <p class=\"refresh-time\"><span>{{ time }}</span> seconds</p>\n        </div>\n        <div class=\"footer-buttons\">\n            <div class=\"continue\">\n                <p>Continuar navegando</p>\n            </div>\n            <div class=\"logout\">\n                <p (click)=\"logout()\">Logout</p>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-59b3f510230b23ce2251fd888e3045219f2e19ea691b4c7ef8c3ecb0c14f52c978265bb8d4f97912a0eb3c51f9b46461e39d0b2c0d6d9e3f9a96c68d4ced0fa2",
            "file": "src/stories/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.css"
            ],
            "styles": [],
            "template": "<input\n  id=\"email\"\n  type=\"email\"\n  [placeholder]=\"placeholder\"\n>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "'Continuar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-input',\n  template: `\n    <input\n      id=\"email\"\n      type=\"email\"\n      [placeholder]=\"placeholder\"\n    >\n  `,\n  styleUrls: ['./input.css'],\n})\nexport class InputComponent {\n\n  @Input()\n  placeholder: any = 'Continuar'\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\n  width: 337px;\n  border-radius: 50px;\n  background-color: #26292C;\n  border: 1px solid #FFF;\n  padding: 20px;\n  color: #E0E0E0;\n  font-family: Mark-Pro;\n}\n\ninput::placeholder {\n  color: #E0E0E0;\n}\ninput:active {\n  outline: none;\n}\n",
                    "styleUrl": "./input.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-fbfa8face6632952bde633568604e9542659b39d6c3fee126720d5b173f030ca7921b74a21e0918a32e69dda8d930e309d47104b62ff7eff83a2d7f7ddaf8585",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isEmailError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isMoved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isPasswordError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "errorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  animations: [\n    trigger('warning', [\n      state('normal', style({\n        borderColor: '#FFF'\n      })),\n      state('yellow', style({\n        borderColor: '#E9B425'\n      })),\n      transition('normal <=> yellow', [\n        animate('0.5s')\n      ])\n    ])\n  ]\n})\nexport class LoginComponent {\n\n  email: string = '';\n  password: string = '';\n  isMoved: boolean = false;\n  isEmailError: boolean = false;\n  isPasswordError: boolean = false;\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  })\n  isLoggedIn = true;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  errorHandler() {\n    if(this.loginForm.controls['email'].errors) {\n      this.isEmailError = true;\n    } else {\n      this.isEmailError = false;\n    }\n\n    if(this.loginForm.controls['password'].errors) {\n      this.isPasswordError = true;\n    } else {\n      this.isPasswordError = false;\n    }\n  }\n\n  login() {\n    if(this.loginForm.controls.email.errors) {\n      this.isEmailError = true;\n    } else {\n      this.isEmailError = false;\n    }\n\n    if(this.loginForm.controls.password.errors) {\n      this.isPasswordError = true;\n    } else {\n      this.isPasswordError = false;\n    }\n\n    this.isLoggedIn = this.authService.login(this.email, this.password);\n\n    this.email = '';\n    this.password = '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n\n\n.containerr {\n    background: linear-gradient(180deg, #33383D 0%, #1C1D20 100%);\n    box-shadow: 4px 4px 70px rgba(0, 0, 0, 0.25);\n    height: auto;\n    display: flex;\n    max-width: 100%;\n    @include responsive(mobileS) {\n        min-height: 100vh;\n    }\n    @include responsive(mobileL) {\n        min-height: 100vh;\n    }\n    @include responsive(tablet) {\n        min-height: 100vh;\n    }\n    .login-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        width: 50%;\n        @include responsive(mobileS) {\n            width: 100%;\n        }\n        @include responsive(mobileL) {\n            width: 100%;\n        }\n        @include responsive(tablet) {\n            width: 100%;\n        }\n        .login-info {\n            @include responsive(mobileS) {\n                margin: 15px auto 0 auto;\n            }\n            @include responsive(mobileL) {\n                margin: 55px auto 0 65px;\n            }\n            @include responsive(tablet) {\n                position: relative;\n                top: 140px;\n                left: 20px;\n            }\n            margin-right: 6.5rem;\n            h1 {\n                font-size: 60px;\n                color: $text-color;\n                margin-top: 3rem;\n                @include responsive(mobileS) {\n                    font-size: 40px;\n                    margin-top: 5rem;\n                }\n                @include responsive(tablet) {\n                    margin: 0;\n                }\n            }\n            p {\n                font-size: 16px;\n                color: $text-color;\n                margin-top: 27px;\n                @include responsive(mobileS) {\n                    font-size: 14px;\n                }\n            }\n        }\n        .login-form {\n          @include responsive(mobileS) {\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n          }\n          @include responsive(mobileL) {\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n          }\n          @include responsive(tablet) {\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n          }\n          .input {\n              display: flex;\n              position: relative;\n              @include responsive(mobileS) {\n                  width: 260px;\n              }\n              input {\n                  display: flex;\n                  flex-direction: column;\n                  width: 380px;\n                  height: 60px;\n                  border-radius: 50px;\n                  background-color: #26292C;\n                  border: 1px solid $white;\n                  padding: 20px;\n                  color: $text-color;\n                  &::placeholder {\n                      color: $text-color;\n                  }\n                  &:active {\n                      outline: none;\n                  }\n                  @include responsive(mobileS) {\n                      width: 290px;\n                  }\n                  @include responsive(mobileL) {\n                      width: 320px;\n                  }\n              }\n              img {\n                  position: absolute;\n                  right: -40px;\n                  top: 30%;\n                  @include responsive(mobileS) {\n                      right: 10px;\n                      width: 20px;\n                  }\n                  @include responsive(mobileL) {\n                      right: 20px;\n                      width: 20px;\n                  }\n              }\n          }\n            h2 {\n                @include responsive(mobileS) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 80px;\n                }\n                @include responsive(mobileL) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 107px;\n                }\n                @include responsive(tablet) {\n                    margin-top: 180px;\n                    position: relative;\n                    right: 130px;\n                }\n                margin-top: 97px;\n                font-weight: 400;\n                font-size: 30px;\n                color: $text-color;\n                margin-bottom: 32px;\n            }\n            button {\n                width: 380px;\n                height: 67px;\n                text-align: center;\n                color: $white;\n                background: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\n                box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.15);\n                border: none;\n                border-radius: 50px;\n                margin-top: 105px;\n                margin-bottom: 25px;\n                font-weight: bold;\n                @include responsive(mobileS) {\n                    width: 260px;\n                    height: 60px;\n                    margin-bottom: 20px;\n                    margin-top: 50px;\n                }\n                @include responsive(mobileL) {\n                    width: 320px;\n                    height: 65px;\n                    margin-bottom: 20px;\n                }\n                @include responsive(tablet) {\n                    margin-bottom: 10rem;\n                    margin-top: 50px;\n                    height: 65px;\n                }\n            }\n            .link-wrapper {\n                display: flex;\n                justify-content: center;\n                 span {\n                    color: $white;\n                 }\n                #link {\n                    margin-bottom: 30px;\n                    text-decoration: none;\n                    color: $text-color;\n                    color: $error-color;\n                    text-decoration: dashed;\n                }\n            }\n        }\n    }\n    .logo-container {\n        position: relative;\n        @include responsive(mobileS) {\n            position: absolute;\n        }\n        @include responsive(mobileL) {\n            position: absolute;\n        }\n        @include responsive(tablet) {\n            position: absolute;\n        }\n        width: 50%;\n        #bg {\n            width: 100%;\n            height: 100%;\n            object-fit: fill;\n            @include responsive(mobileS) {\n                display: none;\n            }\n            @include responsive(mobileL) {\n                display: none;\n            }\n            @include responsive(tablet) {\n                display: none;\n            }\n\n        }\n        #logo {\n            position: absolute;\n            left: 35%;\n            top: 2.5%;\n            @include responsive(mobileS) {\n                position: absolute;\n                width: 210px;\n                top: 20px;\n                left: 60px;\n                margin-bottom: 20px;\n            }\n            @include responsive(mobileL) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 75px;\n                margin-bottom: 20px;\n            }\n            @include responsive(tablet) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 245px;\n                margin-bottom: 20px;\n            }\n        }\n    }\n}\n\n.errorMessage {\n    display: flex;\n    font-weight: 700;\n    text-align: center;\n    font-size: 16px;\n    color: $error-color;\n    padding-left: 70px;\n    @include responsive(mobileS) {\n        padding-left: 15px;\n        align-items: center;\n    }\n    @include responsive(mobileL) {\n        align-items: center;\n        padding-right: 40px;\n    }\n    @include responsive(tablet) {\n        align-items: center;\n        padding-right: 50px;\n    }\n}\n\n.in-input {\n    position: absolute;\n    transform: translateX(-63px);\n    transition: .5s;\n    @include responsive(mobileS) {\n      transform: translateX(0);\n      right: 30px;\n    }\n}\n\n.out-input {\n    position: absolute;\n    transition: 0.5s;\n    right: -40px;\n    top: 15%;\n    @include responsive(mobileS) {\n     right: 30px;\n    }\n}\n\n.inputError {\n    border-color: $error-color !important;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"containerr\">\n    <div class=\"login-container\">\n        <div class=\"login-info mark-font\">\n            <h1>Olá,</h1>\n            <p>Para continuar navegando de forma <br> segura, efetue o login na rede.</p>\n        </div>\n        <div class=\"login-form mark-font\">\n            <h2>Login</h2>\n            <form\n                class=\"login-form\"\n                [formGroup]=\"loginForm\"\n                (change)=\"errorHandler()\"\n\n            >\n                <div class=\"input\" style=\"margin-bottom: 30px;\">\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        formControlName=\"email\"\n                        [@warning]=\"isEmailError ? 'yellow' : 'normal'\"\n                        [(ngModel)]=\"email\"\n                        placeholder=\"Usuário\"\n                    >\n                    <img\n                        [class.out-input]=\"email == ''\" [class.in-input] =\"email != '' && email != ' '\"\n                        src=\"../../../assets/icon-user.svg\"\n                        id=\"user-icon-default\"\n                    >\n                </div>\n                <div class=\"input\" style=\"margin-bottom: 30px;\">\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        formControlName=\"password\"\n                        [(ngModel)]=\"password\"\n                        [@warning]=\"isPasswordError ? 'yellow' : 'normal'\"\n                        placeholder=\"Senha\"\n                    >\n                    <img\n                        [class.out-input]=\"password == ''\" [class.in-input] =\"password != '' && password != ' '\"\n                        src=\"../../../assets/icon-password.svg\"\n                        id=\"password-icon-default\"\n                    >\n                </div>\n                <label *ngIf=\"isLoggedIn else errorMessage\"></label>\n                <button\n                    type=\"submit\"\n                    (click)=\"login()\"\n                    [disabled]=\"!loginForm.valid\">\n                    Continuar\n                </button>\n            </form>\n            <div class=\"link-wrapper\">\n                <span>Nao possui uma conta?</span>\n                <a id=\"link\" href=\"/register\">ㅤCadastre-se</a>\n            </div>\n        </div>\n    </div>\n    <div class=\"logo-container\">\n        <img src=\"../../../assets/compass02.png\" id=\"logo\" alt=\"Logo\">\n        <img src=\"../../../assets/compass01.png\" id=\"bg\" alt=\"Notebook\">\n    </div>\n</div>\n\n<ng-template #errorMessage>\n    <p class=\"errorMessage mark-font\">Ops, usuario ou senha invalidos. <br> Tente novamente!</p>\n</ng-template>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-6f2d54c8969df78a7df11978416ac5df1c3db68259bf6fc7b4f7cf5d2951adf6f0fd12308091090005508927614959d41e2eaac5b7d857f70f32b21c063fe239",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPassword",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isConfirmPasswordError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isEmailError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isPasswordError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "registerForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "validEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "validPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "errorHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "haveLowercase",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "haveNumber",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "haveSymbols",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "haveUppercase",
                    "args": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n  animations: [\n    trigger('warning', [\n      state('normal', style({\n        borderColor: '#FFF'\n      })),\n      state('yellow', style({\n        borderColor: '#E9B425'\n      })),\n      transition('normal <=> yellow', [\n        animate('0.5s')\n      ])\n    ])\n  ]\n})\nexport class RegisterComponent {\n\n  email: string = '';\n  password: string = '';\n  confirmPassword: string = '';\n\n  isError: boolean = false;\n  isEmailError: boolean = false;\n  isPasswordError: boolean = false;\n  isConfirmPasswordError: boolean = false;\n\n  validEmail: any;\n  validPassword: any;\n\n  registerForm = new FormGroup({\n    email: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.pattern(\"^(?=.*[A-Z])(?=.*[!#@$%&])(?=.*[0-9])(?=.*[a-z]).{6,15}$\")\n    ])\n  })\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  errorHandler() {\n    if(this.registerForm.controls['email'].errors) {\n      this.isEmailError = true;\n    } else {\n      this.isEmailError = false;\n    }\n\n    if(this.registerForm.controls['password'].errors) {\n      this.isPasswordError = true;\n    } else {\n      this.isPasswordError = false;\n    }\n\n    if(this.registerForm.controls['confirmPassword'].errors) {\n      this.isConfirmPasswordError = true;\n    } else {\n      this.isConfirmPasswordError = false;\n    }\n  }\n\n  validate() {\n    this.validEmail = this.registerForm.controls['email'].errors?.['pattern'] && this.registerForm.controls['email'].errors?.['required'];\n    this.validPassword = this.registerForm.controls['password'].errors?.['pattern'] &&\n      this.registerForm.controls['password'].errors?.['required'] &&\n      this.registerForm.controls['confirmPassword'] == this.registerForm.controls['password']\n\n    if(this.validEmail == true && this.validPassword == true) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  haveLowercase(param: string) {\n    let regEx = /[a-z]/;\n    return regEx.test(param);\n  }\n\n  haveUppercase(param: string) {\n    let regEx = /[A-Z]/;\n    return regEx.test(param);\n  }\n\n  haveNumber(param: string) {\n    let regEx = /[0-9]/;\n    return regEx.test(param);\n  }\n\n  haveSymbols(param: string) {\n    let regEx = /[$&+,:;=?@#|'<>.^*()%!-]/;\n    return regEx.test(param);\n  }\n\n  register() {\n    if(!this.registerForm.valid && !this.registerForm.dirty) {\n      this.isError = true;\n    } else {\n      this.authService.register(this.email, this.password);\n\n      this.email = '';\n      this.password = '';\n    }\n  }\n\n  get Email() {\n    return this.registerForm.get('email')\n  }\n\n  get Password() {\n    return this.registerForm.get('password')\n  }\n\n  get ConfirmPassword() {\n    return this.registerForm.get('confirmPassword')\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n\n\n.containerr {\n    background: linear-gradient(180deg, #33383D 0%, #1C1D20 100%);\n    box-shadow: 4px 4px 70px rgba(0, 0, 0, 0.25);\n    height: auto;\n    display: flex;\n    max-width: 100%;\n    @include responsive(mobileS) {\n        min-height: 100vh;\n    }\n    @include responsive(mobileL) {\n        min-height: 100vh;\n    }\n    @include responsive(tablet) {\n        min-height: 100vh;\n    }\n    .login-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        width: 50%;\n        @include responsive(mobileS) {\n            width: 100%;\n        }\n        @include responsive(mobileL) {\n            width: 100%;\n        }\n        @include responsive(tablet) {\n            width: 100%;\n        }\n        .login-info {\n            @include responsive(mobileS) {\n                margin: 15px auto 0 auto;\n            }\n            @include responsive(mobileL) {\n                margin: 55px auto 0 auto;\n            }\n            @include responsive(tablet) {\n                position: relative;\n                top: 140px;\n                left: 20px;\n            }\n            margin-right: 6.5rem;\n            h1 {\n                font-size: 60px;\n                color: $text-color;\n                margin-top: 3rem;\n                @include responsive(mobileS) {\n                    font-size: 40px;\n                    margin-top: 5rem;\n                }\n                @include responsive(tablet) {\n                    margin: 0;\n                }\n            }\n            p {\n                font-size: 16px;\n                color: $text-color;\n                margin-top: 27px;\n                @include responsive(mobileS) {\n                    font-size: 14px;\n                }\n            }\n        }\n        .login-form {\n            @include responsive(mobileS) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            @include responsive(mobileL) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            @include responsive(tablet) {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            .input {\n                display: flex;\n                position: relative;\n                @include responsive(mobileS) {\n                    width: 260px;\n                }\n                input {\n                    display: flex;\n                    flex-direction: column;\n                    width: 380px;\n                    height: 60px;\n                    border-radius: 50px;\n                    background-color: #26292C;\n                    border: 1px solid $white;\n                    padding: 20px;\n                    color: $text-color;\n                    &::placeholder {\n                        color: $text-color;\n                    }\n                    &:active {\n                        outline: none;\n                    }\n                    @include responsive(mobileS) {\n                        width: 290px;\n                    }\n                    @include responsive(mobileL) {\n                        width: 320px;\n                    }\n                }\n                img {\n                    position: absolute;\n                    right: -40px;\n                    top: 30%;\n                    @include responsive(mobileS) {\n                        right: 10px;\n                        width: 20px;\n                    }\n                    @include responsive(mobileL) {\n                        right: 20px;\n                        width: 20px;\n                    }\n                }\n            }\n            .errorContainer {\n                margin-left: 20px;\n                max-width: 220px;\n                text-align: justify;\n                margin-top: 10px;\n                .error {\n                    font-size: 16px;\n                    font-weight: 700;\n                    text-align: center;\n                    color: $error-color;\n                }\n            }\n            .passwordErrorContainer {\n                margin-left: 20px;\n                max-width: 320px;\n                margin-top: 10px;\n                @include responsive(mobileS) {\n                    max-width: 220px;\n                }\n                .error {\n                    font-size: 16px;\n                    font-weight: 700;\n                    color: $error-color;\n                }\n            }\n            h2 {\n                @include responsive(mobileS) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 58px;\n                }\n                @include responsive(mobileL) {\n                    margin-top: 50px;\n                    position: relative;\n                    right: 74px;\n                }\n                @include responsive(tablet) {\n                    margin-top: 180px;\n                    position: relative;\n                    right: 105px;\n                }\n                margin-top: 97px;\n                font-weight: 400;\n                font-size: 30px;\n                color: $text-color;\n                margin-bottom: 32px;\n            }\n            button {\n                width: 380px;\n                height: 67px;\n                text-align: center;\n                color: $white;\n                background: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\n                box-shadow: inset 5px 5px 15px rgba(0, 0, 0, 0.15);\n                border: 2px solid #FF2D04;\n                border-radius: 50px;\n                margin-top: 115px;\n                margin-bottom: 25px;\n                font-weight: bold;\n                @include responsive(mobileS) {\n                    width: 260px;\n                    height: 60px;\n                    margin-bottom: 20px;\n                    margin-top: 50px;\n                }\n                @include responsive(mobileL) {\n                    width: 320px;\n                    height: 65px;\n                    margin-bottom: 20px;\n                }\n                @include responsive(tablet) {\n                    margin-bottom: 20px;\n                    margin-top: 50px;\n                    height: 65px;\n                }\n            }\n            #link {\n                display: flex;\n                justify-content: center;\n                margin-bottom: 30px;\n                text-decoration: none;\n                color: $text-color;\n            }\n        }\n    }\n    .logo-container {\n        position: relative;\n        @include responsive(mobileS) {\n            position: absolute;\n        }\n        @include responsive(mobileL) {\n            position: absolute;\n        }\n        @include responsive(tablet) {\n            position: absolute;\n        }\n        width: 50%;\n        #bg {\n            width: 100%;\n            height: 100%;\n            object-fit: fill;\n            @include responsive(mobileS) {\n                display: none;\n            }\n            @include responsive(mobileL) {\n                display: none;\n            }\n            @include responsive(tablet) {\n                display: none;\n            }\n            \n        }\n        #logo {\n            position: absolute;\n            left: 35%;\n            top: 2.5%;\n            @include responsive(mobileS) {\n                position: absolute;\n                width: 210px;\n                top: 20px;\n                left: 60px;\n                margin-bottom: 20px;\n            }\n            @include responsive(mobileL) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 75px;\n                margin-bottom: 20px;\n            }\n            @include responsive(tablet) {\n                position: absolute;\n                width: 250px;\n                top: 20px;\n                left: 245px;\n                margin-bottom: 20px;\n            }\n        }\n    }\n}\n\n.errorMessage {\n    display: flex;\n    font-weight: 700;\n    text-align: center;\n    font-size: 16px;\n    color: $error-color;\n    padding-left: 70px;\n    @include responsive(mobileS) {\n        padding-left: 15px;\n        align-items: center;\n    }\n    @include responsive(mobileL) {\n        align-items: center;\n        padding-right: 40px;\n    }\n    @include responsive(tablet) {\n        align-items: center;\n        padding-right: 50px;\n    }\n}\n\n.in-input {\n    position: absolute;\n    transform: translateX(-63px);\n    transition: .5s;\n    @include responsive(mobileS) {\n      transform: translateX(0px);\n    }\n    @include responsive(mobileL) {\n        transform: translateX(0px);\n    }\n}\n\n.out-input {\n    position: absolute;\n    transition: 0.5s;\n    right: -40px;\n    top: 15%;\n    @include responsive(mobileS) {\n        position: absolute;\n        right: 10px;\n    }\n}\n\n.checked {\n    color: green !important;\n}\n\n.inputError {\n    border-color: $error-color !important;\n}",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "Email": {
                    "name": "Email",
                    "getSignature": {
                        "name": "Email",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "Password": {
                    "name": "Password",
                    "getSignature": {
                        "name": "Password",
                        "type": "",
                        "returnType": "",
                        "line": 125
                    }
                },
                "ConfirmPassword": {
                    "name": "ConfirmPassword",
                    "getSignature": {
                        "name": "ConfirmPassword",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                }
            },
            "templateData": "<div class=\"containerr\">\n    <div class=\"login-container\">\n        <div class=\"login-info mark-font\">\n            <h1>Olá,</h1>\n            <p>Para continuar navegando de forma <br> segura, efetue o cadastro na rede.</p>\n        </div>\n        <div class=\"login-form mark-font\">\n            <h2>Registrar</h2>\n            <form\n                class=\"login-form\"\n                [formGroup]=\"registerForm\"\n                (change)=\"errorHandler()\"\n                (ngSubmit)=\"validate()\">\n                <div style=\"margin-bottom: 30px;\">\n                    <div class=\"input\">\n                        <input\n                            id=\"email\"\n                            type=\"email\" \n                            formControlName=\"email\"\n                            [@warning]=\"isEmailError ? 'yellow' : 'normal'\"\n                            [(ngModel)]=\"email\"\n                            placeholder=\"Usuário\"\n                        >\n                        <img \n                            [class.out-input]=\"email == ''\" [class.in-input] =\"email != '' && email != ' '\"\n                            src=\"../../../assets/icon-user.svg\" \n                            id=\"user-icon-default\"\n                        >\n                    </div>\n                    <div *ngIf=\"(Email?.invalid && Email?.touched) || Email?.dirty\" class=\"errorContainer\">\n                        <small \n                            *ngIf=\"registerForm.controls['email'].errors?.['required']\"\n                            class=\"error\" \n                        >\n                            Insira um email\n                        </small>\n                        <small \n                            *ngIf=\"registerForm.controls['email'].errors?.['pattern']\"\n                            class=\"error\"\n                        >\n                            Insira um email valido\n                        </small>\n                    </div>\n                </div>\n                <div style=\"margin-bottom: 30px;\">\n                    <div class=\"input\">\n                        <input\n                            id=\"password\" \n                            type=\"password\" \n                            formControlName=\"password\"\n                            [(ngModel)]=\"password\"\n                            [@warning]=\"isPasswordError ? 'yellow' : 'normal'\"\n                            placeholder=\"Senha\"\n                        >\n                        <img \n                            [class.out-input]=\"password == ''\" [class.in-input] =\"password != '' && password != ' '\"\n                            src=\"../../../assets/icon-password.svg\" \n                            id=\"password-icon-default\" \n                        >\n                    </div>\n                    <div *ngIf=\"(Password?.invalid && Password?.touched) || Password?.dirty\" class=\"passwordErrorContainer\">\n                        <small \n                            *ngIf=\"registerForm.controls['password'].errors?.['required']\" \n                            class=\"error\"\n                        >\n                            Insira uma senha\n                        </small>\n                        <small \n                            *ngIf=\"registerForm.controls['password'].errors?.['pattern']\"\n                            class=\"error\"\n                            id=\"passwordError\"\n                        >\n                            Sua senha deve conter: \n                            <ul>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"password.length >= 6\">\n                                    6 caracteres\n                                </li>\n                                <li \n                                    class=\"error\" \n                                    [class.checked]=\"haveUppercase(password)\">\n                                    Uma letra maiuscula\n                                </li>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"haveLowercase(password)\">\n                                    Uma letra minuscula\n                                </li>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"haveNumber(password)\">\n                                    Um numero\n                                </li>\n                                <li \n                                    class=\"error\"\n                                    [class.checked]=\"haveSymbols(password)\">\n                                    Um caracter especial\n                                </li>\n                            </ul>\n                        </small>\n                    </div>\n                </div>\n                <div style=\"margin-bottom: 30px;\">\n                    <div class=\"input\">\n                        <input\n                            id=\"confirmPassword\" \n                            type=\"password\" \n                            formControlName=\"confirmPassword\"\n                            [(ngModel)]=\"confirmPassword\"\n                            [@warning]=\"isConfirmPasswordError ? 'yellow' : 'normal'\"\n                            placeholder=\"Confirme sua senha\"\n                        >\n                        <img \n                            [class.out-input]=\"password == ''\" [class.in-input] =\"password != '' && password != ' '\"\n                            src=\"../../../assets/icon-password.svg\" \n                            id=\"password-icon-default\" \n                        >\n                    </div>\n                    <div *ngIf=\"(ConfirmPassword?.invalid && ConfirmPassword?.touched) || ConfirmPassword?.dirty\" class=\"errorContainer\">\n                        <small \n                            *ngIf=\"registerForm.controls['confirmPassword'].errors?.['required']\" \n                            class=\"error\"\n                        >\n                            Confirme sua senha <br>\n                        </small>\n                        <small \n                            *ngIf=\"!(registerForm.controls['confirmPassword'].value == registerForm.controls['password'].value)\"\n                            class=\"error\"\n                        >\n                            As senhas devem ser iguais\n                        </small>\n                    </div>\n                </div>\n                <button \n                    type=\"submit\" \n                    (click)=\"register()\"\n                    [disabled]=\"!registerForm.valid\">\n                    Continuar\n                </button>\n            </form>\n            <a id=\"link\" href=\"/login\">Ja possui uma conta? Faca login</a>\n        </div>\n    </div>\n    <div class=\"logo-container\">\n        <img src=\"../../../assets/compass02.png\" id=\"logo\" alt=\"Logo\">\n        <img src=\"../../../assets/compass01.png\" id=\"bg\" alt=\"Notebook\">\n    </div>\n</div>"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-e53310e6dc0e0ecab1befdd383097ca189c32a71f4ca8765e1941fa1b33eac56d086cbfc6954f618f7aced24b5100a9c699ccf25e124ce3be6ce102f3c2eaed3",
            "file": "src/stories/subtitle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subtitle",
            "styleUrls": [
                "./title.css"
            ],
            "styles": [],
            "template": "<p>{{ text }}</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "'Para continuar navegando de forma <br> segura, efetue o login na rede.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-subtitle',\n  template: `\n    <p>{{ text }}</p>\n  `,\n  styleUrls: ['./title.css'],\n})\nexport class TitleComponent {\n  @Input()\n  text: any = 'Para continuar navegando de forma <br> segura, efetue o login na rede.'\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\n  font-size: 60px;\n  font-family: Mark-Pro;\n  color: #E0E0E0;\n}\n",
                    "styleUrl": "./title.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-5510c89fbe9780ad39ca9fd3e19996b99eaa806907cdf5193cfdb25ff20dd2db6ab7660247da61cb4633500e891e2f68f41026be4b247f3fa31e3d4189eca686-1",
            "file": "src/stories/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.css"
            ],
            "styles": [],
            "template": "<h1>{{ title }}</h1>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-title',\n  template: `\n    <h1>{{ title }}</h1>\n  `,\n  styleUrls: ['./title.css'],\n})\nexport class TitleComponent {\n  @Input()\n  title: any = 'Title'\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\n  font-size: 60px;\n  font-family: Mark-Pro;\n  color: #E0E0E0;\n}\n",
                    "styleUrl": "./title.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TitleComponent-1"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-36b4095c513bc21665fe5ed71b97c53d47e811f8679b6166d30c683b6b3798f0ce144541d1396ef645e4b9667560338238fd813a19f575593ad597fc666ec940",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { AuthService } from 'src/app/shared/services/auth.service';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { environment } from 'src/environments/environment';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { WeatherService } from './shared/services/weather.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { registerLocaleData } from '@angular/common';\nimport localePt from '@angular/common/locales/pt';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nregisterLocaleData(localePt)\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    RegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [WeatherService, AuthService],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "WeatherService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f04dde49874a5aa4766061a406c608e778280ae4a6ddbac1b134fe2fa9b84cbbb5fd6d4686c22559c8b617bcc70be50824f3dc9399613b17598dee75a2c9d795",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth/auth.guard';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "environmentExample.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"\",\n    authDomain: \"\",\n    projectId: \"\",\n    storageBucket: \"\",\n    messagingSenderId: \"\",\n    appId: \"\",\n    measurementId: \"\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'your api key here'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyDzKKnmpOVOVj7ZNqNXVm5JqoMZ44KkHkM\",\n    authDomain: \"compass-01.firebaseapp.com\",\n    projectId: \"compass-01\",\n    storageBucket: \"compass-01.appspot.com\",\n    messagingSenderId: \"114774932441\",\n    appId: \"1:114774932441:web:58c4201c74d76138a0f7c8\",\n    measurementId: \"G-8JEWB4P7SM\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'bfa29a247389ee6ae90007c90a10c40b'\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args =>({\n  props:{\n    ...args\n  }\n})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args =>({\n  props:{\n    ...args\n  }\n})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args =>({\n  props:{\n    ...args\n  }\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args =>({\n  props:{\n    ...args\n  }\n})"
                }
            ],
            "src/stories/Input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args =>({\n  props:{\n    ...args\n  }\n})"
                }
            ],
            "src/stories/Title.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args =>({\n  props:{\n    ...args\n  }\n})"
                }
            ],
            "environmentExample.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "environmentExample.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"\",\n    authDomain: \"\",\n    projectId: \"\",\n    storageBucket: \"\",\n    messagingSenderId: \"\",\n    appId: \"\",\n    measurementId: \"\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'your api key here'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyDzKKnmpOVOVj7ZNqNXVm5JqoMZ44KkHkM\",\n    authDomain: \"compass-01.firebaseapp.com\",\n    projectId: \"compass-01\",\n    storageBucket: \"compass-01.appspot.com\",\n    messagingSenderId: \"114774932441\",\n    appId: \"1:114774932441:web:58c4201c74d76138a0f7c8\",\n    measurementId: \"G-8JEWB4P7SM\"\n  },\n  apiUrl: 'https://api.openweathermap.org/data/2.5/weather/',\n  APPID: 'bfa29a247389ee6ae90007c90a10c40b'\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "environmentExample.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/weather.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/subtitle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}